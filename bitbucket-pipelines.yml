pipelines:
  branches:
    'dev':
    - step:
        name: Dotnet Build / Build Docker Image
        image: mcr.microsoft.com/dotnet/core/sdk:2.2
        caches:
          - dotnetcore
        script:
          - /bin/bash ./build-scripts/version-update.sh 1.0.$BITBUCKET_BUILD_NUMBER
          - dotnet build Lykke.Service.$COMPONENT_NAME.sln --configuration Release
          - dotnet test Lykke.Service.$COMPONENT_NAME.sln --no-restore --configuration Release
          - dotnet publish src/Lykke.Service.$COMPONENT_NAME/Lykke.Service.$COMPONENT_NAME.csproj --no-restore --configuration Release --output ../../publish
          # build the Docker image (this will use the Dockerfile in the root of the repo)
          - docker build -t $DOCKER_REPO/service-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH ./publish
          - dotnet publish src/Lykke.Job.$COMPONENT_NAME/Lykke.Job.$COMPONENT_NAME.csproj --no-restore --configuration Release --output ../../job-publish
          # build the Docker image (this will use the Dockerfile in the root of the repo)
          - docker build -t $DOCKER_REPO/job-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH ./job-publish
          # authenticate with the Docker Hub registry
          - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
          # push the new Docker images to the Docker registry
          - docker push $DOCKER_REPO/service-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH
          - docker push $DOCKER_REPO/job-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH
        services:
          - docker
    - step:
          # trigger: manual
          name: Deploy to Kubernetes
          image: atlassian/pipelines-kubectl
          script:
          - echo $Dev_Kube_Token | base64 -d > ./kube_token
          - echo $Dev_Kube_CA | base64 -d > ./kube_ca
          - kubectl config set-cluster maven-demo-aks --server=https://maven-demo-aks-b54a5075.hcp.westeurope.azmk8s.io:443 --certificate-authority="./kube_ca"
          - kubectl config set-credentials gitlab-user --token="$(cat ./kube_token)"
          - kubectl config set-context maven-demo-aks --cluster=maven-demo-aks --user=gitlab-user
          - kubectl config use-context maven-demo-aks
          # Change Yamls
          - sed -i -e "s|\$version|$BITBUCKET_BUILD_NUMBER|"  deploy-yamls-service/deployment.yaml
          - sed -i -e "s|\$ConnectionString|$SETTINGS_URL|"  deploy-yamls-service/deployment.yaml
          - cat deploy-yamls-service/deployment.yaml
          - sed -i -e "s|\$version|$BITBUCKET_BUILD_NUMBER|"  deploy-yamls-job/deployment.yaml
          - sed -i -e "s|\$ConnectionString|$SETTINGS_URL|"  deploy-yamls-job/deployment.yaml
          - cat deploy-yamls-job/deployment.yaml
          # Apply Yaml Files
          - kubectl apply -f  deploy-yamls-job/namespace.yaml
          - kubectl apply -f  deploy-yamls-job/service.yaml
          - kubectl apply -f  deploy-yamls-job/deployment.yaml
          - kubectl apply -f  deploy-yamls-service/namespace.yaml
          - kubectl apply -f  deploy-yamls-service/service.yaml
          - kubectl apply -f  deploy-yamls-service/deployment.yaml

    'master':
    - step:
        name: Dotnet Build / Build Docker Image
        image: mcr.microsoft.com/dotnet/core/sdk:2.2
        caches:
          - dotnetcore
        script:
          - /bin/bash ./build-scripts/version-update.sh 1.0.$BITBUCKET_BUILD_NUMBER
          - dotnet build Lykke.Service.$COMPONENT_NAME.sln --configuration Release
          - dotnet test Lykke.Service.$COMPONENT_NAME.sln --no-restore --configuration Release
          - dotnet publish src/Lykke.Service.$COMPONENT_NAME/Lykke.Service.$COMPONENT_NAME.csproj --no-restore --configuration Release --output ../../publish
          # build the Docker image (this will use the Dockerfile in the root of the repo)
          - docker build -t $DOCKER_REPO/service-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH ./publish
          - dotnet publish src/Lykke.Job.$COMPONENT_NAME/Lykke.Job.$COMPONENT_NAME.csproj --no-restore --configuration Release --output ../../job-publish
          # build the Docker image (this will use the Dockerfile in the root of the repo)
          - docker build -t $DOCKER_REPO/job-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH ./job-publish
          # authenticate with the Docker Hub registry
          - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
          # push the new Docker images to the Docker registry
          - docker push $DOCKER_REPO/service-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH
          - docker push $DOCKER_REPO/job-$IMAGE_COMPONENT_NAME:$BITBUCKET_BRANCH
        services:
          - docker
