// <auto-generated />
using MAVN.Service.QuorumExplorer.MsSqlRepositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MAVN.Service.QuorumExplorer.MsSqlRepositories.Migrations
{
    [DbContext(typeof(QeContext))]
    [Migration("20190821105544_AddTransactionLogDecodedFlag")]
    partial class AddTransactionLogDecodedFlag
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("quorum_explorer")
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.ABIEntity", b =>
                {
                    b.Property<string>("Signature")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("signature");

                    b.Property<string>("Abi")
                        .IsRequired()
                        .HasColumnName("abi");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.HasKey("Signature");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.ToTable("ABIs");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.BlockEntity", b =>
                {
                    b.Property<string>("BlockHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("block_hash");

                    b.Property<long>("Number")
                        .HasColumnName("number");

                    b.Property<string>("ParentHash")
                        .HasColumnName("parent_hash");

                    b.Property<long>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("TransactionsCount")
                        .HasColumnName("transactions_count");

                    b.HasKey("BlockHash");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ParentHash")
                        .IsUnique()
                        .HasFilter("[parent_hash] IS NOT NULL");

                    b.HasIndex("Timestamp");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.EventEntity", b =>
                {
                    b.Property<long>("LogIndex")
                        .HasColumnName("log_index");

                    b.Property<string>("TransactionHash")
                        .HasColumnName("transaction_hash");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnName("event_name");

                    b.Property<string>("EventSignature")
                        .IsRequired()
                        .HasColumnName("event_signature");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .HasColumnName("parameters_json");

                    b.HasKey("LogIndex", "TransactionHash");

                    b.HasIndex("EventName");

                    b.HasIndex("EventSignature");

                    b.HasIndex("TransactionHash");

                    b.HasIndex("LogIndex", "TransactionHash")
                        .IsUnique();

                    b.ToTable("events");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.EventParameterEntity", b =>
                {
                    b.Property<long>("LogIndex")
                        .HasColumnName("log_index");

                    b.Property<int>("ParameterOrder")
                        .HasColumnName("parameter_order");

                    b.Property<string>("TransactionHash")
                        .HasColumnName("transaction_hash");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnName("parameter_name");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnName("parameter_type");

                    b.Property<string>("ParameterValue")
                        .IsRequired()
                        .HasColumnName("parameter_value");

                    b.Property<string>("ParameterValueHash")
                        .IsRequired()
                        .HasColumnName("parameter_value_hash");

                    b.HasKey("LogIndex", "ParameterOrder", "TransactionHash");

                    b.HasIndex("TransactionHash");

                    b.HasIndex("LogIndex", "TransactionHash");

                    b.HasIndex("ParameterType", "ParameterValueHash");

                    b.ToTable("event_parameters");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.FunctionCallEntity", b =>
                {
                    b.Property<string>("TransactionHash")
                        .HasColumnName("transaction_hash");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnName("function_name");

                    b.Property<string>("FunctionSignature")
                        .IsRequired()
                        .HasColumnName("function_signature");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .HasColumnName("parameters_json");

                    b.HasKey("TransactionHash");

                    b.HasIndex("TransactionHash")
                        .IsUnique();

                    b.ToTable("function_calls");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.FunctionCallParameterEntity", b =>
                {
                    b.Property<int>("ParameterOrder")
                        .HasColumnName("parameter_order");

                    b.Property<string>("TransactionHash")
                        .HasColumnName("transaction_hash");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnName("parameter_name");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnName("parameter_type");

                    b.Property<string>("ParameterValue")
                        .IsRequired()
                        .HasColumnName("parameter_value");

                    b.Property<string>("ParameterValueHash")
                        .IsRequired()
                        .HasColumnName("parameter_value_hash");

                    b.HasKey("ParameterOrder", "TransactionHash");

                    b.HasIndex("TransactionHash");

                    b.HasIndex("ParameterType", "ParameterValueHash");

                    b.ToTable("function_call_parameters");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.TransactionEntity", b =>
                {
                    b.Property<string>("TransactionHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_hash");

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasColumnName("block_hash");

                    b.Property<long>("BlockNumber")
                        .HasColumnName("block_number");

                    b.Property<string>("ContractAddress")
                        .HasColumnName("contract_address");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnName("from");

                    b.Property<string>("Input")
                        .HasColumnName("input");

                    b.Property<string>("InputSignature")
                        .HasColumnName("input_signature");

                    b.Property<long>("Nonce")
                        .HasColumnName("nonce");

                    b.Property<long>("Status")
                        .HasColumnName("status");

                    b.Property<string>("To")
                        .HasColumnName("to");

                    b.Property<long>("TransactionIndex")
                        .HasColumnName("transaction_index");

                    b.HasKey("TransactionHash");

                    b.HasIndex("BlockHash");

                    b.HasIndex("BlockNumber");

                    b.HasIndex("ContractAddress");

                    b.HasIndex("From");

                    b.HasIndex("Status");

                    b.HasIndex("To");

                    b.HasIndex("BlockHash", "TransactionIndex")
                        .IsUnique();

                    b.HasIndex("From", "Nonce")
                        .IsUnique();

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.TransactionLogEntity", b =>
                {
                    b.Property<long>("LogIndex")
                        .HasColumnName("log_index");

                    b.Property<string>("TransactionHash")
                        .HasColumnName("transaction_hash");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address");

                    b.Property<string>("Data")
                        .HasColumnName("data");

                    b.Property<bool>("Decoded")
                        .HasColumnName("decoded");

                    b.Property<string>("Topic0")
                        .IsRequired()
                        .HasColumnName("topic_0");

                    b.Property<string>("Topic1")
                        .HasColumnName("topic_1");

                    b.Property<string>("Topic2")
                        .HasColumnName("topic_2");

                    b.Property<string>("Topic3")
                        .HasColumnName("topic_3");

                    b.HasKey("LogIndex", "TransactionHash");

                    b.HasIndex("Address");

                    b.HasIndex("Decoded");

                    b.HasIndex("Topic0");

                    b.HasIndex("Topic1");

                    b.HasIndex("Topic2");

                    b.HasIndex("Topic3");

                    b.HasIndex("TransactionHash");

                    b.ToTable("transaction_logs");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.BlockEntity", b =>
                {
                    b.HasOne("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.BlockEntity", "Child")
                        .WithOne("Parent")
                        .HasForeignKey("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.BlockEntity", "ParentHash");
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.EventEntity", b =>
                {
                    b.HasOne("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.TransactionLogEntity", "TransactionLog")
                        .WithOne("Event")
                        .HasForeignKey("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.EventEntity", "LogIndex", "TransactionHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.EventParameterEntity", b =>
                {
                    b.HasOne("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.EventEntity", "Event")
                        .WithMany("Parameters")
                        .HasForeignKey("LogIndex", "TransactionHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.FunctionCallEntity", b =>
                {
                    b.HasOne("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.TransactionEntity", "Transaction")
                        .WithOne("FunctionCall")
                        .HasForeignKey("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.FunctionCallEntity", "TransactionHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.FunctionCallParameterEntity", b =>
                {
                    b.HasOne("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.FunctionCallEntity", "FunctionCall")
                        .WithMany("Parameters")
                        .HasForeignKey("TransactionHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.TransactionEntity", b =>
                {
                    b.HasOne("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.BlockEntity", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.TransactionLogEntity", b =>
                {
                    b.HasOne("Lykke.Service.QuorumExplorer.MsSqlRepositories.Entities.TransactionEntity", "Transaction")
                        .WithMany("Logs")
                        .HasForeignKey("TransactionHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
